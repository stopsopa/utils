EmployerEnity : 
EmployerAddress : PD9waHANCg0KbmFtZXNwYWNlIEFwcEJ1bmRsZVxNb2RlbDsNCnVzZSBTdG9wc29wYVxVdGlsc0J1bmRsZVxFbnRpdHlcQWJzdHJhY3RFbnRpdHk7DQoNCg0KLyoqDQogKiBFbXBsb3llckFkZHJlc3MNCiAqLw0KY2xhc3MgRW1wbG95ZXJBZGRyZXNzIGV4dGVuZHMgQWJzdHJhY3RFbnRpdHkNCnsNCiAgICAvKioNCiAgICAgKiBAdmFyIHN0cmluZw0KICAgICAqLw0KICAgIHByb3RlY3RlZCAkc3RyZWV0Ow0KDQogICAgLyoqDQogICAgICogQHZhciBzdHJpbmcNCiAgICAgKi8NCiAgICBwcm90ZWN0ZWQgJHppcGNvZGU7DQoNCiAgICAvKioNCiAgICAgKiBAdmFyIHN0cmluZw0KICAgICAqLw0KICAgIHByb3RlY3RlZCAkY2l0eTsNCg0KICAgIC8qKg0KICAgICAqIEB2YXIgaW50ZWdlcg0KICAgICAqLw0KICAgIHByb3RlY3RlZCAkaWQ7DQoNCiAgICAvKioNCiAgICAgKiBAdmFyIEVtcGxveWVyDQogICAgICovDQogICAgcHJvdGVjdGVkICRlbXBsb3llcjsNCg0KDQogICAgLyoqDQogICAgICogU2V0IHN0cmVldA0KICAgICAqDQogICAgICogQHBhcmFtIHN0cmluZyAkc3RyZWV0DQogICAgICogQHJldHVybiBFbXBsb3llckFkZHJlc3MNCiAgICAgKi8NCiAgICBwdWJsaWMgZnVuY3Rpb24gc2V0U3RyZWV0KCRzdHJlZXQpDQogICAgew0KICAgICAgICAkdGhpcy0+c3RyZWV0ID0gJHN0cmVldDsNCg0KICAgICAgICByZXR1cm4gJHRoaXM7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogR2V0IHN0cmVldA0KICAgICAqDQogICAgICogQHJldHVybiBzdHJpbmcNCiAgICAgKi8NCiAgICBwdWJsaWMgZnVuY3Rpb24gZ2V0U3RyZWV0KCkNCiAgICB7DQogICAgICAgIHJldHVybiAkdGhpcy0+c3RyZWV0Ow0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIFNldCB6aXBjb2RlDQogICAgICoNCiAgICAgKiBAcGFyYW0gc3RyaW5nICR6aXBjb2RlDQogICAgICogQHJldHVybiBFbXBsb3llckFkZHJlc3MNCiAgICAgKi8NCiAgICBwdWJsaWMgZnVuY3Rpb24gc2V0WmlwY29kZSgkemlwY29kZSkNCiAgICB7DQogICAgICAgICR0aGlzLT56aXBjb2RlID0gJHppcGNvZGU7DQoNCiAgICAgICAgcmV0dXJuICR0aGlzOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIEdldCB6aXBjb2RlDQogICAgICoNCiAgICAgKiBAcmV0dXJuIHN0cmluZw0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiBnZXRaaXBjb2RlKCkNCiAgICB7DQogICAgICAgIHJldHVybiAkdGhpcy0+emlwY29kZTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBTZXQgY2l0eQ0KICAgICAqDQogICAgICogQHBhcmFtIHN0cmluZyAkY2l0eQ0KICAgICAqIEByZXR1cm4gRW1wbG95ZXJBZGRyZXNzDQogICAgICovDQogICAgcHVibGljIGZ1bmN0aW9uIHNldENpdHkoJGNpdHkpDQogICAgew0KICAgICAgICAkdGhpcy0+Y2l0eSA9ICRjaXR5Ow0KDQogICAgICAgIHJldHVybiAkdGhpczsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBHZXQgY2l0eQ0KICAgICAqDQogICAgICogQHJldHVybiBzdHJpbmcNCiAgICAgKi8NCiAgICBwdWJsaWMgZnVuY3Rpb24gZ2V0Q2l0eSgpDQogICAgew0KICAgICAgICByZXR1cm4gJHRoaXMtPmNpdHk7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogR2V0IGlkDQogICAgICoNCiAgICAgKiBAcmV0dXJuIGludGVnZXINCiAgICAgKi8NCiAgICBwdWJsaWMgZnVuY3Rpb24gZ2V0SWQoKQ0KICAgIHsNCiAgICAgICAgcmV0dXJuICR0aGlzLT5pZDsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBTZXQgZW1wbG95ZXINCiAgICAgKg0KICAgICAqIEBwYXJhbSBFbXBsb3llciAkZW1wbG95ZXINCiAgICAgKiBAcmV0dXJuIEVtcGxveWVyQWRkcmVzcw0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiBzZXRFbXBsb3llcihFbXBsb3llciAkZW1wbG95ZXIgPSBudWxsKQ0KICAgIHsNCiAgICAgICAgJHRoaXMtPmVtcGxveWVyID0gJGVtcGxveWVyOw0KDQogICAgICAgIHJldHVybiAkdGhpczsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBHZXQgZW1wbG95ZXINCiAgICAgKg0KICAgICAqIEByZXR1cm4gRW1wbG95ZXINCiAgICAgKi8NCiAgICBwdWJsaWMgZnVuY3Rpb24gZ2V0RW1wbG95ZXIoKQ0KICAgIHsNCiAgICAgICAgcmV0dXJuICR0aGlzLT5lbXBsb3llcjsNCiAgICB9DQp9DQo=
Controller: PD9waHANCg0KbmFtZXNwYWNlIEFwcEJ1bmRsZVxDb250cm9sbGVyXFNwOw0KDQp1c2UgQXBwQnVuZGxlXEVudGl0eVxFbXBsb3llcjsNCnVzZSBBcHBCdW5kbGVcRW50aXR5XEVtcGxveWVyTWFuYWdlcjsNCnVzZSBBcHBCdW5kbGVcRm9ybVxTcFxQcm9maWxlVHlwZTsNCnVzZSBTZW5zaW9cQnVuZGxlXEZyYW1ld29ya0V4dHJhQnVuZGxlXENvbmZpZ3VyYXRpb25cUm91dGU7DQp1c2UgU3RvcHNvcGFcVXRpbHNCdW5kbGVcQ29udHJvbGxlclxBYnN0cmFjdENvbnRyb2xsZXI7DQp1c2UgU3RvcHNvcGFcVXRpbHNCdW5kbGVcTGliXFJlcXVlc3Q7DQoNCi8qKg0KICogQFJvdXRlKCIvc3RyZWZhLXByYWNvZGF3Y3kvc3Ryb25hIikNCiAqLw0KY2xhc3MgUHJvZmlsZUNvbnRyb2xsZXIgZXh0ZW5kcyBBYnN0cmFjdENvbnRyb2xsZXINCnsNCiAgICAvKioNCiAgICAgKiBAUm91dGUoIiIsIG5hbWU9InNwLXByb2ZpbGUiKQ0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiBpbmRleEFjdGlvbihSZXF1ZXN0ICRyZXF1ZXN0KSB7DQoNCiAgICAgICAgLyogQHZhciAkbWFuIEVtcGxveWVyTWFuYWdlciAqLw0KICAgICAgICAkbWFuID0gJHRoaXMtPmdldChFbXBsb3llck1hbmFnZXI6OlNFUlZJQ0UpOw0KDQogICAgICAgIC8qIEB2YXIgJGVudGl0eSBFbXBsb3llciAqLw0KICAgICAgICAkZW50aXR5ID0gJHRoaXMtPmdldFVzZXIoKTsNCg0KICAgICAgICAkZW50aXR5ID0gJG1hbi0+ZmluZCgkZW50aXR5LT5nZXRJZCgpKTsNCg0KICAgICAgICAkdHlwZSA9IG5ldyBQcm9maWxlVHlwZSgpOw0KDQogICAgICAgICR1cmwgPSAkdGhpcy0+Z2VuZXJhdGVVcmwoJ3NwLXByb2ZpbGUnKTsNCg0KICAgICAgICAkZm9ybSA9ICR0aGlzLT5jcmVhdGVGb3JtKCR0eXBlLCAkZW50aXR5LCBhcnJheSgNCiAgICAgICAgICAgICdhY3Rpb24nID0+ICR1cmwNCiAgICAgICAgKSk7DQoNCiAgICAgICAgaWYgKCRyZXF1ZXN0LT5pc1Bvc3QoKSkgew0KDQogICAgICAgICAgICAkZm9ybS0+aGFuZGxlUmVxdWVzdCgkcmVxdWVzdCk7DQoNCiAgICAgICAgICAgIGlmICgkZm9ybS0+aXNWYWxpZCgpKSB7DQoNCiAgICAgICAgICAgICAgICAkbWFuLT51cGRhdGUoJGVudGl0eSk7DQoNCiAgICAgICAgICAgICAgICAkdGhpcy0+c2V0Tm90aWZpY2F0aW9uKCRyZXF1ZXN0LCAnU3Ryb25hIHd3dyB6b3N0YcWCYSB6YWt0dWFsaXpvd2FuYScpOw0KDQogICAgICAgICAgICAgICAgcmV0dXJuICR0aGlzLT5yZWRpcmVjdCgkdXJsKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KDQogICAgICAgIHJldHVybiAkdGhpcy0+cmVuZGVyKCdBcHBCdW5kbGU6U3AvUHJvZmlsZTppbmRleC5odG1sLnR3aWcnLCBhcnJheSgNCiAgICAgICAgICAgICdmb3JtJyA9PiAkZm9ybS0+Y3JlYXRlVmlldygpLA0KICAgICAgICApKTsNCiAgICB9DQp9DQo=
twig: 
ProfileType (EmployerType): PD9waHANCg0KbmFtZXNwYWNlIEFwcEJ1bmRsZVxGb3JtXFNwOw0KDQp1c2UgQXBwQnVuZGxlXEVudGl0eVxDYXRlZ29yeTsNCnVzZSBBcHBCdW5kbGVcRW50aXR5XENhdGVnb3J5TWFuYWdlcjsNCnVzZSBTdG9wc29wYVxVdGlsc0J1bmRsZVxGb3JtXFZhbGlkYXRvclxDb25zdHJhaW50c1xNaW5NYXhFbnRpdGllczsNCnVzZSBEb2N0cmluZVxPUk1cRW50aXR5UmVwb3NpdG9yeTsNCnVzZSBTeW1mb255XENvbXBvbmVudFxGb3JtXEFic3RyYWN0VHlwZTsNCnVzZSBTeW1mb255XENvbXBvbmVudFxGb3JtXEZvcm1CdWlsZGVySW50ZXJmYWNlOw0KdXNlIFN5bWZvbnlcQ29tcG9uZW50XFZhbGlkYXRvclxDb25zdHJhaW50cyBhcyBBc3NlcnQ7DQp1c2UgU3ltZm9ueVxDb21wb25lbnRcT3B0aW9uc1Jlc29sdmVyXE9wdGlvbnNSZXNvbHZlcjsNCnVzZSBBcHBCdW5kbGVcRW50aXR5XEVtcGxveWVyOw0KdXNlIFN5bWZvbnlcQ29tcG9uZW50XE9wdGlvbnNSZXNvbHZlclxPcHRpb25zUmVzb2x2ZXJJbnRlcmZhY2U7DQoNCmNsYXNzIFByb2ZpbGVUeXBlIGV4dGVuZHMgQWJzdHJhY3RUeXBlIHsNCiAgICAvKioNCiAgICAgKiBAdmFyIENhdGVnb3J5TWFuYWdlcg0KICAgICAqLw0KLy8gICAgcHJvdGVjdGVkICRjbWFuOw0KLy8gICAgcHVibGljIGZ1bmN0aW9uIHNldENhdGVnb3J5TWFuYWdlcihDYXRlZ29yeU1hbmFnZXIgJGNtYW4pIHsNCi8vICAgICAgICAkdGhpcy0+Y21hbiA9ICRjbWFuOw0KLy8gICAgICAgIHJldHVybiAkdGhpczsNCi8vICAgIH0NCg0KICAgIHB1YmxpYyBmdW5jdGlvbiBidWlsZEZvcm0oRm9ybUJ1aWxkZXJJbnRlcmZhY2UgJGJ1aWxkZXIsIGFycmF5ICRvcHRpb25zKSB7DQogICAgICAgICRub3RibGFuayAgICAgICA9IG5ldyBBc3NlcnRcTm90QmxhbmsoKTsNCiAgICAgICAgJG1pbm1heCAgICAgICAgID0gbmV3IE1pbk1heEVudGl0aWVzKGFycmF5KA0KICAgICAgICAgICAgJ21pbicgPT4gMSwNCiAgICAgICAgICAgICdtYXgnID0+IDMsDQogICAgICAgICAgICAnbWVzc2FnZScgPT4gJ1d5Ymllcnogb2QgJW1pbiUgZG8gJW1heCUga2F0ZWdvcmlpLCBrdMOzcmUgbmFqbGVwaWVqIG9waXN1asSFIG9mZXJ0xJkgcHJhY3knDQogICAgICAgICkpOw0KDQogICAgICAgICRidWlsZGVyDQogICAgICAgICAgICAtPmFkZCgncGhvbmUnLCAndGV4dCcsIFsNCiAgICAgICAgICAgICAgICAnbGFiZWwnID0+ICdUZWxlZm9uJywNCiAgICAgICAgICAgICAgICAnY29uc3RyYWludHMnID0+IGFycmF5KA0KICAgICAgICAgICAgICAgICAgICBuZXcgQXNzZXJ0XExlbmd0aChbDQogICAgICAgICAgICAgICAgICAgICAgICAnbWluJyAgICAgICAgPT4gOSwNCiAgICAgICAgICAgICAgICAgICAgICAgICdtYXgnICAgICAgICA9PiAyMiwNCiAgICAgICAgICAgICAgICAgICAgICAgICdtYXhNZXNzYWdlJyA9PiAnUG9kYW55IHRlbGVmb24gamVzdCBuaWVwcmF3aWTFgm93eScsDQogICAgICAgICAgICAgICAgICAgICAgICAnbWluTWVzc2FnZScgPT4gJ1BvZGFueSB0ZWxlZm9uIGplc3QgbmllcHJhd2lkxYJvd3knLA0KICAgICAgICAgICAgICAgICAgICBdKQ0KICAgICAgICAgICAgICAgICksDQogICAgICAgICAgICBdKQ0KICAgICAgICAgICAgLT5hZGQoJ3dlYnNpdGUnLCAndGV4dCcsIFsNCiAgICAgICAgICAgICAgICAnbGFiZWwnID0+ICdBZHJlcyBzdHJvbnkgd3d3JywNCiAgICAgICAgICAgICAgICAncmVxdWlyZWQnICAgID0+IGZhbHNlLA0KICAgICAgICAgICAgICAgICdjb25zdHJhaW50cycgPT4gWw0KICAgICAgICAgICAgICAgICAgICBuZXcgQXNzZXJ0XFVybChbDQogICAgICAgICAgICAgICAgICAgICAgICAnbWVzc2FnZScgPT4gJ1BvZGFueSBhZHJlcyB3d3cgamVzdCBuaWVwcmF3aWTFgm93eS4gUHJhd2lkxYJvd3kgZm9ybWF0IG5wLjogaHR0cDovL2FkcmVzZmlybXkucGwnDQogICAgICAgICAgICAgICAgICAgIF0pDQogICAgICAgICAgICAgICAgXQ0KICAgICAgICAgICAgXSkNCiAgICAgICAgICAgIC0+YWRkKCdlbWFpbCcsICdlbWFpbCcsIFsNCiAgICAgICAgICAgICAgICAnbGFiZWwnID0+ICdFbWFpbCcsDQogICAgICAgICAgICAgICAgJ3JlcXVpcmVkJyAgICA9PiBmYWxzZSwNCiAgICAgICAgICAgICAgICAnY29uc3RyYWludHMnID0+IGFycmF5KA0KICAgICAgICAgICAgICAgICAgICBuZXcgQXNzZXJ0XEVtYWlsKFsNCiAgICAgICAgICAgICAgICAgICAgICAgICdtZXNzYWdlJyA9PiAnUG9kYW55IGFkcmVzIGVtYWlsIGplc3QgbmllcHJhd2lkxYJvd3knDQogICAgICAgICAgICAgICAgICAgIF0pDQogICAgICAgICAgICAgICAgKSwNCiAgICAgICAgICAgIF0pDQogICAgICAgICAgICAtPmFkZCgnZGVzY3JpcHRpb24nLCAndGV4dGFyZWEnLCBbDQogICAgICAgICAgICAgICAgJ2xhYmVsJyA9PiAnT3BpcyBmaXJteScsDQogICAgICAgICAgICAgICAgJ3JlcXVpcmVkJyAgICA9PiB0cnVlLA0KICAgICAgICAgICAgICAgICdhdHRyJyA9PiBhcnJheSgNCiAgICAgICAgICAgICAgICAgICAgJ3N0eWxlJyA9PiAiaGVpZ2h0OjE1MHB4OyINCiAgICAgICAgICAgICAgICApLA0KICAgICAgICAgICAgICAgICdjb25zdHJhaW50cycgPT4gWw0KICAgICAgICAgICAgICAgICAgICAkbm90YmxhbmssDQogICAgICAgICAgICAgICAgICAgIG5ldyBBc3NlcnRcTGVuZ3RoKFsNCiAgICAgICAgICAgICAgICAgICAgICAgICdtaW4nICAgICAgICA9PiAxMDAsDQogICAgICAgICAgICAgICAgICAgICAgICAnbWF4TWVzc2FnZScgPT4gJ0TFgnVnb8WbxIcgcG9sYSBvcGlzIG11c2kgemF3aWVyYcSHIHBvd3nFvGVqIDEwMCB6bmFrw7N3JywNCiAgICAgICAgICAgICAgICAgICAgICAgICdtaW5NZXNzYWdlJyA9PiAnRMWCdWdvxZvEhyBwb2xhIG9waXMgbXVzaSB6YXdpZXJhxIcgcG93ecW8ZWogMTAwIHpuYWvDs3cnLA0KICAgICAgICAgICAgICAgICAgICBdKQ0KICAgICAgICAgICAgICAgIF0NCiAgICAgICAgICAgIF0pDQoJICAgIC0+YWRkKCdjYXRlZ29yaWVzJywgJ2VudGl0eScsIGFycmF5KA0KICAgICAgICAgICAgICAgICdsYWJlbCcgPT4gJ1d5YmllcnogYnJhbsW8ZSAobWF4IDMpJywNCiAgICAgICAgICAgICAgICAnY2xhc3MnICAgICAgICAgPT4gQ2F0ZWdvcnk6OkVOLA0KICAgICAgICAgICAgICAgICdwcm9wZXJ0eScgICAgICA9PiAnbmFtZScsIC8vIHRla3N0IHJlcHJlemVudHVqxIVjeSBlbmNqxJkgYmlyemVteSB6IHBvbGENCiAgICAgICAgICAgICAgICAnbGFiZWwnICAgICAgICAgPT4gJ1d5YmllcnogZG8gMyBrYXRlZ29yaWknLA0KLy8gICAgICAgICAgICAgICAgJ2VtcHR5X3ZhbHVlJyAgID0+ICctPSBXeWJpZXJ6IGthdGVnb3JpZSA9LScsDQogICAgICAgICAgICAgICAgJ211bHRpcGxlJyAgICAgID0+IHRydWUsDQovLyAgICAgICAgICAgICAgICAnZXhwYW5kZWQnICAgICAgPT4gZmFsc2UsDQogICAgICAgICAgICAgICAgJ3F1ZXJ5X2J1aWxkZXInID0+IGZ1bmN0aW9uIChFbnRpdHlSZXBvc2l0b3J5ICRyZXBvc2l0b3J5KSB7DQogICAgICAgICAgICAgICAgICAgIHJldHVybiAkcmVwb3NpdG9yeS0+Y3JlYXRlUXVlcnlCdWlsZGVyKCdnJyktPm9yZGVyQnkoJ2cubmFtZScsICdBU0MnKTsNCiAgICAgICAgICAgICAgICB9LA0KICAgICAgICAgICAgICAgICdjb25zdHJhaW50cycgICA9PiBbDQogICAgICAgICAgICAgICAgICAgICRtaW5tYXgNCiAgICAgICAgICAgICAgICBdLA0KCSAgICApKQ0KICAgICAgICAgICAgLT5hZGQoJ2VtcGxveWVyQWRkcmVzc2VzJywgJ2NvbGxlY3Rpb24nLCBhcnJheSgNCiAgICAgICAgICAgICAgICAnYWxsb3dfYWRkJyAgICAgPT4gdHJ1ZSwNCiAgICAgICAgICAgICAgICAnYWxsb3dfZGVsZXRlJyAgPT4gdHJ1ZSwNCiAgICAgICAgICAgICAgICAndHlwZScgICAgICAgICAgPT4gbmV3IEVtcGxveWVyQWRkcmVzc1R5cGUoKSwNCiAgICAgICAgICAgICkpDQogICAgICAgICAgICAtPmFkZCgnYWdyZWVtZW50JywgJ2NoZWNrYm94JywgWw0KICAgICAgICAgICAgICAgICdsYWJlbCcgPT4gJzxzcGFuPiBPxZt3aWFkY3phbSwgxbxlIGZpcm1hIHBvc2lhZGEgYXV0b3Jza2llIHByYXdhIG1hasSFdGtvd2UgZG8gemHFgsSFY3pvbnljaCBtYXRlcmlhxYLDs3cgKHpnb2RuaWUgeiB1c3Rhd8SFIG8gcHJhd2llIGF1dG9yc2tpbSBpIHByYXdhY2ggcG9rcmV3bnljaC4gRHouVS4gMTk5NCBuciAyNCBwb3ouIDgzIHdyYXogeiBww7PFum5pZWpzenltaSB6bWlhbmFtaSkgb3JheiB3eXJhxbxhbSB6Z29kxJkgbmEga29yenlzdGFuaWUgeiBwcnpla2F6YW55Y2ggbWF0ZXJpYcWCw7N3IHcgendpxIV6a3UgeiB1Y3plc3RuaWN0d2VtIGZpcm15IHcgQWJzb2x2ZW50IFRhbGVudCBEYXlzLiA8L3NwYW4+JywNCiAgICAgICAgICAgICAgICAncmVxdWlyZWQnICAgID0+IHRydWUsDQogICAgICAgICAgICAgICAgJ2NvbnN0cmFpbnRzJyA9PiBbDQogICAgICAgICAgICAgICAgICAgIG5ldyBBc3NlcnRcTm90QmxhbmsoWw0KICAgICAgICAgICAgICAgICAgICAgICAgJ21lc3NhZ2UnID0+ICfFu2VieSB6YXBpc2FjIC0gd3lyYcW6IHpnb2TEmScNCiAgICAgICAgICAgICAgICAgICAgXSkNCiAgICAgICAgICAgICAgICBdLA0KICAgICAgICAgICAgICAgICdtYXBwZWQnID0+IGZhbHNlDQogICAgICAgICAgICBdKQ0KICAgICAgICAgICAgLT5hZGQoJ3N1Ym1pdCcsICdzdWJtaXQnLCBhcnJheSgNCiAgICAgICAgICAgICAgICAnbGFiZWwnID0+ICdaYXBpc3onLA0KICAgICAgICAgICAgICAgICdhdHRyJyA9PiBhcnJheSgNCiAgICAgICAgICAgICAgICAgICAgJ2NsYXNzJyA9PiAnYnRuIGJ0bi1zdWNjZXNzIGJ0bi1yYWQgYnRuLXRyYW5zJw0KICAgICAgICAgICAgICAgICkNCiAgICAgICAgICAgICkpDQoNCg0KDQogICAgICAgIDsNCiAgICB9DQogICAgcHVibGljIGZ1bmN0aW9uIGNvbmZpZ3VyZU9wdGlvbnMoT3B0aW9uc1Jlc29sdmVyICRyZXNvbHZlcikNCiAgICB7DQovLyAgICAgICAgbmllY2hnaW5pZShFbXBsb3llcjo6Z2V0Q2xhc3NOYW1lc3BhY2UoKSk7DQogICAgICAgICRyZXNvbHZlci0+c2V0RGVmYXVsdHMoYXJyYXkoDQogICAgICAgICAgICAnZGF0YV9jbGFzcycgPT4gRW1wbG95ZXI6OmdldENsYXNzTmFtZXNwYWNlKCksDQogICAgICAgICkpOw0KICAgIH0NCiAgICBwdWJsaWMgZnVuY3Rpb24gc2V0RGVmYXVsdE9wdGlvbnMoT3B0aW9uc1Jlc29sdmVySW50ZXJmYWNlICRyZXNvbHZlcikNCiAgICB7DQovLyAgICAgICAgbmllY2hnaW5pZShFbXBsb3llcjo6Z2V0Q2xhc3NOYW1lc3BhY2UoKSk7DQogICAgICAgICRyZXNvbHZlci0+c2V0RGVmYXVsdHMoYXJyYXkoDQogICAgICAgICAgICAnZGF0YV9jbGFzcycgPT4gRW1wbG95ZXI6OmdldENsYXNzTmFtZXNwYWNlKCksDQogICAgICAgICkpOw0KICAgIH0NCg0KICAgIHB1YmxpYyBmdW5jdGlvbiBnZXROYW1lKCkgew0KICAgICAgICByZXR1cm4gJ29mZmVyJzsNCiAgICB9DQoNCn0=
EmployerAddressType: PD9waHANCg0KbmFtZXNwYWNlIEFwcEJ1bmRsZVxGb3JtXFNwOw0KDQp1c2UgU3ltZm9ueVxDb21wb25lbnRcRm9ybVxBYnN0cmFjdFR5cGU7DQp1c2UgU3ltZm9ueVxDb21wb25lbnRcRm9ybVxGb3JtQnVpbGRlckludGVyZmFjZTsNCnVzZSBTeW1mb255XENvbXBvbmVudFxPcHRpb25zUmVzb2x2ZXJcT3B0aW9uc1Jlc29sdmVyOw0KdXNlIFN5bWZvbnlcQ29tcG9uZW50XE9wdGlvbnNSZXNvbHZlclxPcHRpb25zUmVzb2x2ZXJJbnRlcmZhY2U7DQp1c2UgU3ltZm9ueVxDb21wb25lbnRcVmFsaWRhdG9yXENvbnN0cmFpbnRzIGFzIEFzc2VydDsNCnVzZSBBcHBCdW5kbGVcRW50aXR5XEVtcGxveWVyQWRkcmVzczsNCg0KY2xhc3MgRW1wbG95ZXJBZGRyZXNzVHlwZSBleHRlbmRzIEFic3RyYWN0VHlwZQ0Kew0KICAgIHB1YmxpYyBmdW5jdGlvbiBidWlsZEZvcm0oRm9ybUJ1aWxkZXJJbnRlcmZhY2UgJGJ1aWxkZXIsIGFycmF5ICRvcHRpb25zKQ0KICAgIHsNCiAgICAgICAgJGJ1bmRsZXMgPSBbDQogICAgICAgICAgICAxID0+ICdQYXJ0bmVyJywNCiAgICAgICAgICAgIDIgPT4gJ1rFgm90eSsnLA0KICAgICAgICAgICAgMyA9PiAnWsWCb3R5JywNCiAgICAgICAgICAgIDQgPT4gJ0Zpb2xldG93eScsDQogICAgICAgICAgICA1ID0+ICdaaWVsb255JywNCiAgICAgICAgXTsNCg0KICAgICAgICAkYnVpbGRlcg0KLy8gICAgICAgICAgICAtPmFkZCgnZW1wbG95ZXInLCAnaGlkZGVuJykNCiAgICAgICAgICAgIC0+YWRkKCdzdHJlZXQnLCAndGV4dCcsIFsNCiAgICAgICAgICAgICAgICAnbGFiZWwnID0+ICdVbGljYScsDQogICAgICAgICAgICAgICAgJ2NvbnN0cmFpbnRzJyA9PiBbDQogICAgICAgICAgICAgICAgICAgIG5ldyBBc3NlcnRcTm90QmxhbmsoWw0KICAgICAgICAgICAgICAgICAgICAgICAgJ21lc3NhZ2UnID0+ICdQb2xlIHVsaWNhIGplc3Qgd3ltYWdhbmUnDQogICAgICAgICAgICAgICAgICAgIF0pLA0KICAgICAgICAgICAgICAgICAgICBuZXcgQXNzZXJ0XExlbmd0aChbDQogICAgICAgICAgICAgICAgICAgICAgICAnbWF4JyAgICAgICAgPT4gNjQsDQogICAgICAgICAgICAgICAgICAgICAgICAnbWF4TWVzc2FnZScgPT4gJ0TFgnVnb8WbxIcgdWxpY3kgamVzdCBuaWVwcmF3aWTFgm93YSAobWF4IDMyIHpuYWtpKScsDQogICAgICAgICAgICAgICAgICAgIF0pDQogICAgICAgICAgICAgICAgXQ0KICAgICAgICAgICAgXSktPmFkZCgnemlwY29kZScsICd0ZXh0JywgWw0KICAgICAgICAgICAgICAgICdsYWJlbCcgPT4gJ0tvZCBwb2N6dG93eScsDQogICAgICAgICAgICAgICAgJ2NvbnN0cmFpbnRzJyA9PiBbDQogICAgICAgICAgICAgICAgICAgIG5ldyBBc3NlcnRcTm90QmxhbmsoWw0KICAgICAgICAgICAgICAgICAgICAgICAgJ21lc3NhZ2UnID0+ICdQb2xlIGtvZCBwb2N6dG93eSBqZXN0IHd5bWFnYW5lJw0KICAgICAgICAgICAgICAgICAgICBdKSwNCiAgICAgICAgICAgICAgICAgICAgbmV3IEFzc2VydFxMZW5ndGgoWw0KICAgICAgICAgICAgICAgICAgICAgICAgJ21heCcgICAgICAgID0+IDgsDQogICAgICAgICAgICAgICAgICAgICAgICAnbWF4TWVzc2FnZScgPT4gJ0TFgnVnb8WbxIcga29keSBwb2N6dG93ZWdvIGplc3QgbmllcHJhd2lkxYJvd2EgKG1heCA4IHpuYWvDs3cpJywNCiAgICAgICAgICAgICAgICAgICAgXSkNCiAgICAgICAgICAgICAgICBdDQogICAgICAgICAgICBdKS0+YWRkKCdjaXR5JywgJ3RleHQnLCBbDQogICAgICAgICAgICAgICAgJ2xhYmVsJyA9PiAnTWlhc3RvJywNCiAgICAgICAgICAgICAgICAnY29uc3RyYWludHMnID0+IFsNCiAgICAgICAgICAgICAgICAgICAgbmV3IEFzc2VydFxOb3RCbGFuayhbDQogICAgICAgICAgICAgICAgICAgICAgICAnbWVzc2FnZScgPT4gJ1BvbGUgbWlhc3RvIGplc3Qgd3ltYWdhbmUnDQogICAgICAgICAgICAgICAgICAgIF0pLA0KICAgICAgICAgICAgICAgICAgICBuZXcgQXNzZXJ0XExlbmd0aChbDQogICAgICAgICAgICAgICAgICAgICAgICAnbWF4JyAgICAgICAgPT4gMzIsDQogICAgICAgICAgICAgICAgICAgICAgICAnbWF4TWVzc2FnZScgPT4gJ0TFgnVnb8WbxIcgbWlhc3RhIGplc3QgbmllcHJhd2lkxYJvd2EgKG1heCAzMiB6bmFraSknLA0KICAgICAgICAgICAgICAgICAgICBdKQ0KICAgICAgICAgICAgICAgIF0NCiAgICAgICAgICAgIF0pOw0KICAgIH0NCg0KICAgIHB1YmxpYyBmdW5jdGlvbiBjb25maWd1cmVPcHRpb25zKE9wdGlvbnNSZXNvbHZlciAkcmVzb2x2ZXIpDQogICAgew0KLy8gICAgICAgIG5pZWNoZ2luaWUoRW1wbG95ZXJBZGRyZXNzOjpnZXRDbGFzc05hbWVzcGFjZSgpKTsNCiAgICAgICAgJHJlc29sdmVyLT5zZXREZWZhdWx0cyhhcnJheSgNCiAgICAgICAgICAgICdkYXRhX2NsYXNzJyA9PiBFbXBsb3llckFkZHJlc3M6OmdldENsYXNzTmFtZXNwYWNlKCksDQogICAgICAgICkpOw0KICAgIH0NCiAgICBwdWJsaWMgZnVuY3Rpb24gc2V0RGVmYXVsdE9wdGlvbnMoT3B0aW9uc1Jlc29sdmVySW50ZXJmYWNlICRyZXNvbHZlcikNCiAgICB7DQovLyAgICAgICAgbmllY2hnaW5pZShFbXBsb3llckFkZHJlc3M6OmdldENsYXNzTmFtZXNwYWNlKCkpOw0KICAgICAgICAkcmVzb2x2ZXItPnNldERlZmF1bHRzKGFycmF5KA0KICAgICAgICAgICAgJ2RhdGFfY2xhc3MnID0+IEVtcGxveWVyQWRkcmVzczo6Z2V0Q2xhc3NOYW1lc3BhY2UoKSwNCiAgICAgICAgKSk7DQogICAgfQ0KDQogICAgcHVibGljIGZ1bmN0aW9uIGdldE5hbWUoKQ0KICAgIHsNCiAgICAgICAgcmV0dXJuICdlbXBsb3llcl9hZGRyZXNzJzsNCiAgICB9DQp9DQo=
i na koniec js: KGZ1bmN0aW9uIChsKSB7DQogICAgICAgIGZ1bmN0aW9uIGdldEtleShkYXRhKSB7DQogICAgICAgICAgICB2YXIga2V5ID0gZGF0YS5zcGxpdCgnLScpOw0KICAgICAgICAgICAga2V5LnNoaWZ0KCk7DQogICAgICAgICAgICByZXR1cm4ga2V5LmpvaW4oJy0nKTsNCiAgICAgICAgfQ0KICAgICAgICBmdW5jdGlvbiBmaW5kUHJlZml4KGspIHsNCiAgICAgICAgICAgIHJldHVybiBrLnJlcGxhY2UoL15bLlxzXFNdKj9pZFxzKj1ccypbIiddKFteIiddKz8pX18qbmFtZV9fKlteIiddK1siJ11bLlxzXFNdKiQvLCAnJDEnKTsNCiAgICAgICAgfQ0KDQogICAgICAgIHZhciBpdGVyID0gJCgnWycrbCsnXScpOw0KDQogICAgICAgIHZhciBpZCA9IGZhbHNlOw0KDQogICAgICAgIGl0ZXIuZWFjaChmdW5jdGlvbiAoKSB7DQogICAgICAgICAgICB2YXIgdCA9ICQodGhpcyk7DQoNCiAgICAgICAgICAgIHZhciB0ZGF0YSA9IHQuZGF0YShnZXRLZXkobCkpOw0KDQogICAgICAgICAgICB2YXIgbGlzdCA9ICQoJ1snK3RkYXRhKyddJyk7DQoNCiAgICAgICAgICAgIHZhciB0bXAgID0gJCgnWycrbGlzdC5kYXRhKGdldEtleSh0ZGF0YSkpKyddJykuaHRtbCgpOw0KDQogICAgICAgICAgICBpZCB8fCAoaWQgPSBmaW5kUHJlZml4KHRtcCkpOw0KDQogICAgICAgICAgICB2YXIgcmVnID0gbmV3IFJlZ0V4cCgnXicraWQrJ18oXFxkKykuKiQnKTsNCg0KICAgICAgICAgICAgdC5vbignY2xpY2snLCBmdW5jdGlvbiAoKSB7DQoNCiAgICAgICAgICAgICAgICB2YXIgbWF4ID0gMDsNCiAgICAgICAgICAgICAgICBsaXN0LmZpbmQoJ1tpZF49IicraWQrJyJdJykuZWFjaChmdW5jdGlvbiAoKSB7DQogICAgICAgICAgICAgICAgICAgIHZhciBpZCA9ICQodGhpcykuYXR0cignaWQnKTsNCiAgICAgICAgICAgICAgICAgICAgaWQgPSBwYXJzZUludChpZC5yZXBsYWNlKHJlZywgJyQxJykpOw0KICAgICAgICAgICAgICAgICAgICBpZiAoaWQgPiBtYXgpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIG1heCA9IGlkDQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9KTsNCg0KICAgICAgICAgICAgICAgIG1heCArPSAxOw0KDQogICAgICAgICAgICAgICAgJCgnPGRpdj48L2Rpdj4nKS5odG1sKHRtcC5yZXBsYWNlKC9fX25hbWVfXy9nLCBtYXgpKS5maW5kKCc+IConKS5hcHBlbmRUbyhsaXN0KTsNCiAgICAgICAgICAgIH0pOw0KICAgICAgICB9KTsNCiAgICB9KSgnZGF0YS1yb2xlLWFkZGxpc3QnKTs=



